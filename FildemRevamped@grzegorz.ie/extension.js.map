{
  "version": 3,
  "sources": ["../node_modules/@girs/gnome-shell/src/index.js", "../gnome-src/log.ts", "../gnome-src/index.ts"],
  "sourcesContent": ["module.exports = {\n  misc: imports.misc,\n  ui: imports.ui\n}", "/**\n * @module log\n * This module contains functions for logging (Just the same as console.log) but it allows\n * us to disable logging in production, save logs etc etc.\n */\n\nexport type LogType = 'INFO' | 'WARN' | 'ERROR' | 'DEBUG';\nexport const log_types = {\n    INFO: 'INFO',\n    WARN: 'WARN',\n    ERROR: 'ERROR',\n    LOG: 'LOG',\n};\n\n\n\n/**\n * @name log_header\n * Logs a header to the console\n * \n * @example [INFO: 12:00:00]\n * \n * @param {LogType} type - The type of log\n * \n * @returns {string} The header\n */\nexport const log_header = (type: LogType): string => {\n    const date = new Date();\n    return `[${type}: ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}:${date.getMilliseconds()}]`;\n};\n\n\n\n/**\n * @name flog\n * Logs a message to the console\n * \n * @param {LogType} type - The type of log\n * @param {Array<unknown>} args - The arguments to log\n * \n * @returns {void} - Nothing, it just logs\n */\nexport const flog = (type: LogType, ...args: Array<unknown>): void => {\n    // -- Only log if we are in debug mode or an ERROR has occured\n    // if (!LOG && type !== log_types.ERROR) return;\n    const header = log_header(type),\n        bold_style = 'font-weight: bold;';\n\n    // -- Create the message, so the header, bolded, then the args\n    print(`%c${header} ${bold_style}`, ...args);\n};", "import { misc, ExtensionMetadata, Extension } from '@girs/gnome-shell';\nconst ExtensionUtils = misc.extensionUtils;\nconst Me = ExtensionUtils.getCurrentExtension() as unknown as Extension;\nconst _ = ExtensionUtils.gettext;\nconst GETTEXT_DOMAIN = 'fildem-revamped';\n\nimport { flog } from './log';\n\n\nclass GlobalExtension {\n    private static _instance: GlobalExtension;\n    public readonly _uuid: string;\n    public readonly _gettext_domain: string = GETTEXT_DOMAIN;\n\n\n\n    /**\n     * @name constructor\n     * The constructor for the extension\n     * \n     * @param {string} uuid - The uuid of the extension\n     */\n    private constructor(uuid: string) {\n        this._uuid = uuid;\n        ExtensionUtils.initTranslations(GETTEXT_DOMAIN);\n\n        // -- Check if Me is defined\n        this._check_me();\n    }\n\n\n\n    /**\n     * @name get_instance\n     * Gets the instance of the extension\n     * \n     * @returns {GlobalExtension} The instance of the extension\n     */\n    public static get_instance(): GlobalExtension {\n        if (!GlobalExtension._instance) GlobalExtension._instance = new GlobalExtension(Me.metadata.uuid);\n        return GlobalExtension._instance;\n    }\n\n\n\n    /**\n     * @name check_me\n     * Checks if the extension is Me or not\n     * \n     * @returns {void} Nothing\n     */\n    private _check_me(): void {\n        if (!Me) {\n            flog('ERROR', _('Me is not defined!'));\n            throw new Error(_('Me is not defined!'));\n        }\n    }\n\n\n\n    /**\n     * @name enable\n     * This function is called when the extension is enabled\n     * by gnome-shell.\n     * \n     * @returns {void} Nothing\n     */\n    public enable(): void {\n        flog('INFO', 'Enabling extension: ', Me.metadata.uuid);\n    }\n\n\n\n    /**\n     * @name disable\n     * This function is called when the extension is disabled\n     * by gnome-shell.\n     * \n     * @returns {void} Nothing\n     */\n    public disable(): void {\n        flog('WARN', 'Disabling extension: ', Me.metadata.uuid);\n    }\n}\n\n\n\n/**\n * @name init\n * This function is called when the extension is loaded\n * by gnome-shell.\n * \n * @param {ExtensionMetadata} meta - The metadata of the extension\n * \n * @returns {GlobalExtension} The extension\n */\nfunction init(meta: ExtensionMetadata): GlobalExtension {\n    flog('INFO', 'Initializing extension: ', meta);\n    return GlobalExtension.get_instance();\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,yDAAAA,SAAA;AAAA,IAAAA,QAAO,UAAU;AAAA,MACf,MAAM,QAAQ;AAAA,MACd,IAAI,QAAQ;AAAA,IACd;AAAA;AAAA;;;ACIO,IAAM,YAAY;AAAA,EACrB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,KAAK;AACT;AAcO,IAAM,aAAa,CAAC,SAA0B;AACjD,QAAM,OAAO,oBAAI,KAAK;AACtB,SAAO,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,KAAK,gBAAgB,CAAC;AAC3G;AAaO,IAAM,OAAO,CAAC,SAAkB,SAA+B;AAGlE,QAAM,SAAS,WAAW,IAAI,GAC1B,aAAa;AAGjB,QAAM,KAAK,MAAM,IAAI,UAAU,IAAI,GAAG,IAAI;AAC9C;;;AClDA,yBAAmD;AACnD,IAAM,iBAAiB,wBAAK;AAC5B,IAAM,KAAK,eAAe,oBAAoB;AAC9C,IAAM,IAAI,eAAe;AACzB,IAAM,iBAAiB;AAKvB,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EAClB,OAAe;AAAA,EACC;AAAA,EACA,kBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUlC,YAAY,MAAc;AAC9B,SAAK,QAAQ;AACb,mBAAe,iBAAiB,cAAc;AAG9C,SAAK,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,eAAgC;AAC1C,QAAI,CAAC,iBAAgB;AAAW,uBAAgB,YAAY,IAAI,iBAAgB,GAAG,SAAS,IAAI;AAChG,WAAO,iBAAgB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,YAAkB;AACtB,QAAI,CAAC,IAAI;AACL,WAAK,SAAS,EAAE,oBAAoB,CAAC;AACrC,YAAM,IAAI,MAAM,EAAE,oBAAoB,CAAC;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWO,SAAe;AAClB,SAAK,QAAQ,wBAAwB,GAAG,SAAS,IAAI;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWO,UAAgB;AACnB,SAAK,QAAQ,yBAAyB,GAAG,SAAS,IAAI;AAAA,EAC1D;AACJ;AAaA,SAAS,KAAK,MAA0C;AACpD,OAAK,QAAQ,4BAA4B,IAAI;AAC7C,SAAO,gBAAgB,aAAa;AACxC;",
  "names": ["module"]
}
